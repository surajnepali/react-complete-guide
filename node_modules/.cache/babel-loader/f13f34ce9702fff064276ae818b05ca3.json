{"ast":null,"code":"var _jsxFileName = \"/home/suraj/Suru/Learning/React/react-complete-guide/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport classes from './App.css'; // import Radium, { StyleRoot } from 'radium';\n\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      persons: [{\n        id: 'lklw1',\n        name: 'Suraj',\n        age: 24\n      }, {\n        id: 'dlkl3',\n        name: 'Susmita',\n        age: 23\n      }, {\n        id: 'najsb1',\n        name: 'Susan',\n        age: 18\n      }],\n      otherState: 'sone other value',\n      showPersons: false\n    };\n\n    this.nameChangedHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n      const person = { ...this.state.persons[personIndex]\n      }; // alternative approach for above object of code\n      // const person = Object.assign({}, this.state.persons[personIndex]);\n\n      person.name = event.target.value;\n      const persons = [...this.state.persons];\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      }); // above line of code instead of using below 6lines of code\n      // this.setState( {\n      //   persons: [\n      //     { name: 'Suraj', age: 24 },\n      //     { name: event.target.value, age: 23 },\n      //     { name: 'Susan', age: 18 }\n      //   ]\n      // } )\n    };\n\n    this.deletePersonHandler = personIndex => {\n      //Wondering ?? how can I edit a constant.\n\n      /*\n        For that, keep in mind that arrays and objects are reference types so, I didn't assign \n        a new value to the constant, it is only holding the pointer. I only change the element \n        it was pointing to.    (G Javascript K)\n      */\n      // const persons   = this.state.persons.slice();\n      const persons = [...this.state.persons];\n      persons.splice(personIndex, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n  }\n\n  render() {\n    // commented for adding pseudo selectors\n    // const style={ //since it is javascript, the values should be written in ''.\n    //   backgroundColor: 'green',\n    //   color: 'white',\n    //   font: 'inherit',\n    //   border: '1px solid blue',\n    //   padding: '8px',\n    //   cursor: 'pointer'\n    //   // ':hover': {\n    //   //   backgroundColor: 'lightgreen',\n    //   //   color: 'black'\n    //   // }\n    // };\n    let persons = null; // let btnClass = '';\n\n    if (this.state.showPersons) {\n      persons = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Persons, {\n          persons: this.state.persons,\n          clicked: this.deletePersonHandler,\n          changed: this.nameChangedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this); // btnClass = classes.Red; // button class always needs to be a string  if we assign it to\n      // class name and classes Red in the end is just a string created by the css loader\n      // which gives us still access to the class like this\n      // But in the end returns a string with the valid css or it is an empty string if \n      // we're outside of this 'if' condition \n      // style.backgroundColor = 'red'; // commented for adding pseudo selectors\n      // style[':hover'] = {\n      //   backgroundColor: 'salmon',\n      //   color: 'black'\n      // }\n    } // let assignedClasses = [];\n    // if(this.state.persons.length <= 2){\n    //   assignedClasses.push(classes.red) //classes = ['red']\n    // }\n    // if(this.state.persons.length <= 1){\n    //   assignedClasses.push(classes.bold) //classes = ['red', 'bold']\n    // }\n\n\n    return (\n      /*#__PURE__*/\n      //JSX\n      _jsxDEV(\"div\", {\n        className: classes.App,\n        children: persons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this)\n    ); //Children means 'all' that are nested in between this <div></div>\n    //creating elements with 4 arguments. \n    //Here, className: 'App' jun chha ni yo chai div in-line class='' wala concept ho haii\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi, I\\'m React App'));\n  }\n\n} // const app = (props) => {\n//   const [personsState, setPersonsState] = useState({\n//     persons: [\n//       {name: 'Suraj', age: 24 },\n//       {name: 'Susmita', age: 23 },\n//       {name: 'Susan', age: 18 }\n//     ]\n//   }); \n//   const [otherState, setOtherState] = useState ('some other values'); \n//   console.log(personsState,otherState);\n//   const switchEventHandler = () => {\n//     //whenever we switch 'personsState' to 'setPersonsSate' it replaces all the values. So,\n//     //we have to make sure that all our old data are included with our new values. \n//     setPersonsState ({\n//       persons: [\n//         {name: 'Asmita', age: 22 },\n//         {name: 'Susmita', age: 23 },\n//         {name: 'Susan', age: 19 }\n//       ]\n//     });\n//   };\n//   return (\n//     //JSX\n//     <div className=\"App\">\n//       <h1>Hi, I'm React App.</h1>\n//       <p>This is really working!!!</p>\n//       <button onClick={switchEventHandler}>Switch Name</button> \n//       <Person name={personsState.persons[0].name} age={personsState.persons[0].age} />\n//       <Person name={personsState.persons[1].name} age={personsState.persons[1].age}>My Hobbies: Dance</Person>\n//       <Person name={personsState.persons[2].name} age={personsState.persons[2].age} />\n//     </div>\n//   );\n// }\n\n\nexport default App;","map":{"version":3,"names":["React","Component","classes","Persons","Cockpit","App","state","persons","id","name","age","otherState","showPersons","nameChangedHandler","event","personIndex","findIndex","p","person","target","value","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","render"],"sources":["/home/suraj/Suru/Learning/React/react-complete-guide/src/containers/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport classes from './App.css';\n// import Radium, { StyleRoot } from 'radium';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n\nclass App extends Component {\n  state = {\n    persons: [\n      {id: 'lklw1', name: 'Suraj', age: 24 },\n      {id: 'dlkl3',name: 'Susmita', age: 23 },\n      {id: 'najsb1', name: 'Susan', age: 18 }\n    ],\n    otherState: 'sone other value',\n    showPersons: false\n  }\n\n  // The 'switchEventHandler' method is removed from 4.6 of course.\n\n  // switchEventHandler = (newName) => {\n  //   // console.log('Was Clicked!!');\n  //   //DON'T DO THIS: this.state.person[0].name = 'Asmita';\n  //   this.setState ( {\n  //     persons: [\n  //       {name: newName, age: 22 },\n  //       {name: 'Susmita', age: 23 },\n  //       {name: 'Susan', age: 19 }\n  //     ]\n  //   }) \n  // }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    // alternative approach for above object of code\n    // const person = Object.assign({}, this.state.persons[personIndex]);\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({persons: persons});\n\n    // above line of code instead of using below 6lines of code\n\n    // this.setState( {\n    //   persons: [\n    //     { name: 'Suraj', age: 24 },\n    //     { name: event.target.value, age: 23 },\n    //     { name: 'Susan', age: 18 }\n    //   ]\n    // } )\n  }\n\n  deletePersonHandler = (personIndex) => {\n    //Wondering ?? how can I edit a constant.\n    /*\n      For that, keep in mind that arrays and objects are reference types so, I didn't assign \n      a new value to the constant, it is only holding the pointer. I only change the element \n      it was pointing to.    (G Javascript K)\n    */ \n    // const persons   = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex,1);\n    this.setState({persons: persons})\n  }  \n\n  togglePersonsHandler =() => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n\n  render() {\n\n    // commented for adding pseudo selectors\n\n    // const style={ //since it is javascript, the values should be written in ''.\n    //   backgroundColor: 'green',\n    //   color: 'white',\n    //   font: 'inherit',\n    //   border: '1px solid blue',\n    //   padding: '8px',\n    //   cursor: 'pointer'\n    //   // ':hover': {\n    //   //   backgroundColor: 'lightgreen',\n    //   //   color: 'black'\n    //   // }\n    // };\n\n    let persons = null;\n    // let btnClass = '';\n\n    if(this.state.showPersons) {\n      persons = (\n          <div>\n            <Persons \n              persons = {this.state.persons}\n              clicked = {this.deletePersonHandler}\n              changed = {this.nameChangedHandler}/>\n          {/* map() function is the one that converts an array into the one we want\n              according to our will and our instructions. */}\n          {/* {this.state.persons.map((person, index) => {\n            return <Person\n                click= {() => this.deletePersonHandler(index)}  \n                name= {person.name}\n                age= {person.age}\n                key= {person.id} // commented to examine the error-boundaries working\n                changed= {(event) => this.nameChangedHandler(event, person.id)} />\n          })} */}\n          {/* <Person \n            name={this.state.persons[0].name} \n          age={this.state.persons[0].age} />\n          <Person \n            name={this.state.persons[1].name} \n            age={this.state.persons[1].age}\n            click={this.switchEventHandler.bind(this, 'Kanchhu')}\n            changed={this.nameChangedHandler} >My Hobbies: Dance</Person>\n          <Person \n            name={this.state.persons[2].name} \n            age={this.state.persons[2].age} /> */}\n        </div>\n        \n      );\n      // btnClass = classes.Red; // button class always needs to be a string  if we assign it to\n            // class name and classes Red in the end is just a string created by the css loader\n            // which gives us still access to the class like this\n            // But in the end returns a string with the valid css or it is an empty string if \n            // we're outside of this 'if' condition \n\n\n      // style.backgroundColor = 'red'; // commented for adding pseudo selectors\n      // style[':hover'] = {\n      //   backgroundColor: 'salmon',\n      //   color: 'black'\n      // }\n    }\n\n    // let assignedClasses = [];\n    // if(this.state.persons.length <= 2){\n    //   assignedClasses.push(classes.red) //classes = ['red']\n    // }\n    // if(this.state.persons.length <= 1){\n    //   assignedClasses.push(classes.bold) //classes = ['red', 'bold']\n    // }\n\n    return (\n      //JSX\n      <div className={classes.App}>\n        {/* <h1>Hi, I'm React App.</h1>\n        <p className={assignedClasses.join(' ')}>This is really working!!!</p>\n        <button \n          className={btnClass}\n          onClick={this.togglePersonsHandler}>Toggle Persons</button>  */}\n          {/* conditions cannot be applied here. */}\n        {/* {this.state.showPersons ===true ?   \n          <div>\n            <Person \n              name={this.state.persons[0].name} \n              age={this.state.persons[0].age} />\n            <Person \n              name={this.state.persons[1].name} \n              age={this.state.persons[1].age}\n              click={this.switchEventHandler.bind(this, 'Kanchhu')}\n              changed={this.nameChangedHandler} >My Hobbies: Dance</Person>\n            <Person \n              name={this.state.persons[2].name} \n              age={this.state.persons[2].age} />\n          </div> : null\n        } */}\n        {persons}\n      </div>\n    );\n\n    \n    //Children means 'all' that are nested in between this <div></div>\n    //creating elements with 4 arguments. \n    //Here, className: 'App' jun chha ni yo chai div in-line class='' wala concept ho haii\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi, I\\'m React App'));\n  }\n}\n\n// const app = (props) => {\n//   const [personsState, setPersonsState] = useState({\n//     persons: [\n//       {name: 'Suraj', age: 24 },\n//       {name: 'Susmita', age: 23 },\n//       {name: 'Susan', age: 18 }\n//     ]\n//   }); \n\n//   const [otherState, setOtherState] = useState ('some other values'); \n\n//   console.log(personsState,otherState);\n\n//   const switchEventHandler = () => {\n//     //whenever we switch 'personsState' to 'setPersonsSate' it replaces all the values. So,\n//     //we have to make sure that all our old data are included with our new values. \n//     setPersonsState ({\n//       persons: [\n//         {name: 'Asmita', age: 22 },\n//         {name: 'Susmita', age: 23 },\n//         {name: 'Susan', age: 19 }\n//       ]\n//     });\n//   };\n\n     \n//   return (\n//     //JSX\n//     <div className=\"App\">\n//       <h1>Hi, I'm React App.</h1>\n//       <p>This is really working!!!</p>\n//       <button onClick={switchEventHandler}>Switch Name</button> \n//       <Person name={personsState.persons[0].name} age={personsState.persons[0].age} />\n//       <Person name={personsState.persons[1].name} age={personsState.persons[1].age}>My Hobbies: Dance</Person>\n//       <Person name={personsState.persons[2].name} age={personsState.persons[2].age} />\n//     </div>\n//   );\n  \n// }\n\nexport default App; "],"mappings":"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"},"metadata":{},"sourceType":"module"}